#!/bin/bash

############### Directories

export SC3_HOME="/home/irsc/seiscomp3"
export KIWI="$SC3_HOME/kiwisc3"
export DATA="$KIWI/DATA"
export WORK="$KIWI/WORK"
export GFDB="$KIWI/GFDB"
export RESULTS="$KIWI/RESULTS"
export PYROCKO="$KIWI/PYROCKO"

############### KIWI Config
#frac=n          is the fraction of stations to be subject to removal in each iteration ( N = num_st / $frac )
#DISLIM=m        is a clearance distance around removed stations preventing that two close-by stations are
#			     simultaneously removed in a single iteration (DISTANCLIMIT = $MDI * $DISLIM)  


############### Functions

CONFIG ()
{	
export SMOOTH_NUM_LIM=75			   
export DCMISFIT_LIM=0.45
export W_S=0.3; W_T=0.2
export MIN_DEP=1
export OMIT_NOISY="False"
export WEIGHT_DIST="False"
export FULLMT="False"
export LEVEL_S2N="0.85"
export NOISE_WINDOW="after"
export EVALUATE_MW="yes"
export MAX_MIS="B"
}


SMB_BK ()
{
	# Output .ps file name is in YYYYMMDDHHmmss format
	smbclient -U user%payesh //192.168.127.27/public -c "cd /NikSejel/Focal-BK ; put $RESULTS/SUMMARY/$EVENT.ps $Y$M$D$h$m$s.ps"
}

round ()
{
echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*$1)+0.5)/(10^$2)" | bc))
}


SMOOTH_STATIONS ()
{
	cd $DATA/$EVENT/DISP/best
 
	sed -i "/e =/c\e = model.Event(lat=$LAT, lon=$LON)" $PYROCKO/dist_azi_bazi.py 2> /dev/null
	
	num_st=`cat .stations.dat | wc -l`
	mkdir ../extra_data 2> /dev/null
	
	cat .stations.dat | while read STNM; do
		STLA=`grep -w "$STNM" $DATA/stations.dat | awk '{print $3}'`
		STLO=`grep -w "$STNM" $DATA/stations.dat | awk '{print $4}'`
		sed -i "/s =/c\s = model.Event(lat=$STLA, lon=$STLO)" $PYROCKO/dist_azi_bazi.py 2> /dev/null
		INFO=`python $PYROCKO/dist_azi_bazi.py`
		DIST=`echo $INFO | awk '{print $1}'`
		AZIM=`echo $INFO | awk '{print substr($2,2,6)}'`
		(( `echo "$AZIM < 0" | bc -l` )) && AZIM=`echo "scale=2; 360 + $AZIM" | bc -l`
		echo "$STNM $DIST $AZIM"
		
	done > .eve_st_azi_dis
	
	cat .stations.dat | while read ST1; do
		cat .stations.dat | while read ST2; do
			[ "$ST1" = "$ST2" ] && continue
			st_dis=`grep -w "$ST1 $ST2" $DATA/distance-info.txt`  
			echo $st_dis >> .st_st_dist
		done
	done	

	cat .stations.dat | while read ST1; do
		DI1=`grep -w "$ST1" .eve_st_azi_dis | cut -f 2 -d " "`
		AZ1=`grep -w "$ST1" .eve_st_azi_dis | cut -f 3 -d " "`
			
		read -a STATIONS <<< `grep "^$ST1" .st_st_dist | sort -n -k 3 | head -n 3`	
		ST2=`echo ${STATIONS[@]} | cut -f 2 -d " "`
		ST3=`echo ${STATIONS[@]} | cut -f 5 -d " "`
		ST4=`echo ${STATIONS[@]} | cut -f 8 -d " "`
			
		DI2=`grep -w "$ST2" .eve_st_azi_dis | cut -f 2 -d " "`
		AZ2=`grep -w "$ST2" .eve_st_azi_dis | cut -f 3 -d " "`
			
		DI3=`grep -w "$ST3" .eve_st_azi_dis | cut -f 2 -d " "`
		AZ3=`grep -w "$ST3" .eve_st_azi_dis | cut -f 3 -d " "`				
				
		DI4=`grep -w "$ST4" .eve_st_azi_dis | cut -f 2 -d " "`
		AZ4=`grep -w "$ST4" .eve_st_azi_dis | cut -f 3 -d " "`				
			
		DI12=`echo "scale=1; (($DI1 - $DI2) * ($DI1 - $DI2)) + (($AZ1 - $AZ2) * ($AZ1 - $AZ2))" | bc -l`
		DI12=`bc -l <<< "sqrt($DI12)"`
			
		DI13=`echo "scale=1; (($DI1 - $DI3) * ($DI1 - $DI3)) + (($AZ1 - $AZ3) * ($AZ1 - $AZ3))" | bc -l`
		DI13=`bc -l <<< "sqrt($DI13)"`	
				
		DI14=`echo "scale=1; (($DI1 - $DI4) * ($DI1 - $DI4)) + (($AZ1 - $AZ4) * ($AZ1 - $AZ4))" | bc -l`
		DI14=`bc -l <<< "sqrt($DI14)"`
			
		MDI=`echo "scale=1; ($DI12 + $DI13 + $DI14) / 3" | bc -l`
		echo "$ST1 $MDI"
			
	done >> .MDI
		
	num_st=`cat .stations.dat | wc -l`
	N=`echo "$num_st / $frac" | bc -l` && N=`round $N 0 2> /dev/null` 
		
	cat .MDI | sort -n -k 2 | head -n $N > .rm_select
		
	cat .rm_select | while read line; do
		STNM=`echo $line | cut -f 1 -d " "`		
		MDI=`echo $line | cut -f 2 -d " "`
		DIS_LIM=`echo "$MDI * $DISLIM" | bc -l`
			
		i=0
		for st in `cat .rm_select`; do	
			[ "$st" = "$STNM" ] && continue
			dist=`grep -w "$st $STNM" .st_st_dist | cut -f 3 -d " "`
			dist=`round $dist 0 2> /dev/null`
			if (( `echo "$dist < $DIS_LIM" | bc -l` )) && [ `grep -w "$st" .final_del 2> /dev/null` ]; then
				i=$((i+1))
			fi
		done
		[ "$i" -eq "0" ] && echo "$STNM" >> .final_del	
	done	

		for station in `cat .final_del 2> /dev/null`; do
			mv *$station* ../extra_data 2> /dev/null
		done	
		cd -
}

STATION_SELECTION ()
{
	[ -d $DATA/$EVENT/FAR ] && rm -f $DATA/$EVENT/FAR/* || mkdir $DATA/$EVENT/FAR 
	cd $DATA/$EVENT/DISP 
	cp $DATA/dist_azi_bazi.py $DATA/$EVENT
	
	sed -i "/e =/c\e = model.Event(lat=$LAT, lon=$LON)" ../dist_azi_bazi.py 2> /dev/null
	for st in `ls DISPL*.IR.* DISPL*.BI.* | cut -f 3 -d "." | sort | uniq`; do
		STLA=`grep -w "$st" $DATA/stations.dat | awk '{print $3}'`
		STLO=`grep -w "$st" $DATA/stations.dat | awk '{print $4}'`
		[ ! -n "$STLA" ] && continue
		sed -i "/s =/c\s = model.Event(lat=$STLA, lon=$STLO)" ../dist_azi_bazi.py 2> /dev/null
		DIST=`python ../dist_azi_bazi.py 2> /dev/null`
		echo $st $DIST
	done > st_dist.dat	
	
	cat st_dist.dat | while read info; do
		ST=`echo $info | cut -f 1 -d " "`
		DS=`echo $info | cut -f 2 -d " "`
		(( `echo "$DS > $MAX_DIS_FAKE" | bc -l` )) && mv *$ST* ../FAR 2> /dev/null
	done	
}


AUTO_SET_KIWI_PARAM ()
{
	SW1=`echo "$LAT >= 27.6" | bc -l`
	SW2=`echo "$LAT <= 30.2" | bc -l`
	SW3=`echo "$LON >= 51.5" | bc -l`
	SW4=`echo "$LON <= 54.7" | bc -l`
	
	TH1=`echo "$LAT >= 34.5" | bc -l`
	TH2=`echo "$LAT <= 36.5" | bc -l`
	TH3=`echo "$LON >= 50.2" | bc -l`
	TH4=`echo "$LON <= 53.5" | bc -l`
	
	MI1=`echo "$LAT >= 26.3" | bc -l`
	MI2=`echo "$LAT <= 28.3" | bc -l`
	MI3=`echo "$LON >= 55.5" | bc -l`
	MI4=`echo "$LON <= 58.0" | bc -l`
	
	LO1=`echo "$LAT >= 33.0" | bc -l`
	LO2=`echo "$LAT <= 34.7" | bc -l`
	LO3=`echo "$LON >= 46.7" | bc -l`
	LO4=`echo "$LON <= 49.9" | bc -l`
	
	TA1=`echo "$LAT >= 36.7" | bc -l`
	TA2=`echo "$LAT <= 39.5" | bc -l`
	TA3=`echo "$LON >= 44.4" | bc -l`
	TA4=`echo "$LON <= 48.5" | bc -l`	
	
	SK1=`echo "$LAT >= 30.7" | bc -l`
	SK2=`echo "$LAT <= 32.8" | bc -l`
	SK3=`echo "$LON >= 49.7" | bc -l`
	SK4=`echo "$LON <= 52.2" | bc -l`

	if [ "$SW1" -eq "1" ] && [ "$SW2" -eq "1" ] && [ "$SW3" -eq "1" ] && [ "$SW4" -eq "1" ]; then
		GFDB_DIR="$GFDB/SW/1"
		MAXDP=60
		MAXDI=1500
	elif [ "$TH1" -eq "1" ] && [ "$TH2" -eq "1" ] && [ "$TH3" -eq "1" ] && [ "$TH4" -eq "1" ]; then
		GFDB_DIR="$GFDB/TEH/1"
		MAXDP=35	
		MAXDI=500
	elif [ "$MI1" -eq "1" ] && [ "$MI2" -eq "1" ] && [ "$MI3" -eq "1" ] && [ "$MI4" -eq "1" ]; then
		GFDB_DIR="$GFDB/Minab"
		MAXDP=50	
		MAXDI=1000
	elif [ "$LO1" -eq "1" ] && [ "$LO2" -eq "1" ] && [ "$LO3" -eq "1" ] && [ "$LO4" -eq "1" ]; then
		GFDB_DIR="$GFDB/Lorestan"
		MAXDP=40	
		MAXDI=1300		
	elif [ "$TA1" -eq "1" ] && [ "$TA2" -eq "1" ] && [ "$TA3" -eq "1" ] && [ "$TA4" -eq "1" ]; then
		GFDB_DIR="$GFDB/Tabriz"
		MAXDP=50
		MAXDI=1200	
	elif [ "$SK1" -eq "1" ] && [ "$SK2" -eq "1" ] && [ "$SK3" -eq "1" ] && [ "$SK4" -eq "1" ]; then
		GFDB_DIR="$GFDB/Shahre_Kord"
		MAXDP=50	
		MAXDI=1000	
	else	
		GFDB_DIR="$GFDB/IRAN/1"
		MAXDP=85	
		MAXDI=1500		
	fi		
	
	
	DC_INV_MOD="invert_dmsdsok"


	if (( `echo "$MAG >= 4.20" | bc -l` )) && (( `echo "$MAG < 4.50" | bc -l` )) ; then		
			F1=(0.030 0.040 0.070 0.080)
			F2=(0.040 0.050 0.080 0.090)
			FM=(0.030 0.040 0.070 0.080)	
			n=2
			frac=3
			DISLIM=2.5		
			data_count=24			
			active_smooth="no"   	# SMOOTH STATIONS?
			LEVEL_RELAMP="2.5" 
			TR_S2_LIM="6"  			# MISFIT FUNCTION CONFIG
			MISFIT_S2="no"
			NE=15000; NES=1500
			SCA_MOM1="2.0e15"
			SCA_MOM2="5.0e16"	
			SCA_STEP="1.0e15"	
			MAX_DIS_FAKE=400							
			MAX_DIS=400
			MAXLOC=250
			MIN_DIS=20
			MAX_DEP=`echo "$DEP + 25" | bc -l`	
			T1=-1; T2=5.0; TS=0.2; CC=5				
			
	elif (( `echo "$MAG >= 4.50" | bc -l` )) && (( `echo "$MAG < 5.00" | bc -l` )) ; then		
			F1=(0.030 0.040 0.070 0.080)
			F2=(0.020 0.030 0.060 0.070)
			FM=(0.030 0.040 0.070 0.080)	
			n=2
			frac=3
			DISLIM=2.5		
			data_count=24			
			active_smooth="no"   	
			LEVEL_RELAMP="2.5" 
			TR_S2_LIM="6"  			
			MISFIT_S2="no"
			NE=20000; NES=1500
			SCA_MOM1="2.0e16"
			SCA_MOM2="3.5e17"	
			SCA_STEP="1.0e16"	
			MAX_DIS_FAKE=500							
			MAX_DIS=500
			MAXLOC=300
			MIN_DIS=50
			MAX_DEP=`echo "$DEP + 25" | bc -l`	
			T1=-1; T2=5.0; TS=0.2; CC=5
			
	elif (( `echo "$MAG >= 5.00" | bc -l` )) && (( `echo "$MAG < 5.50" | bc -l` )) ; then		
			F1=(0.020 0.030 0.060 0.070)
			F2=(0.010 0.020 0.050 0.060)
			F3=(0.010 0.020 0.060 0.070)
			FM=(0.020 0.030 0.060 0.070)
			n=3
			frac=3
			DISLIM=2.5		
			data_count=24
			active_smooth="no"  
			LEVEL_RELAMP="2.5" 
			TR_S2_LIM="10"
			MISFIT_S2="no"
			NE=25000; NES=2000
			SCA_MOM1="2.0e16"
			SCA_MOM2="3.5e17"	
			SCA_STEP="1.0e16"	
			MAX_DIS_FAKE=600							
			MAX_DIS=1500
			MAXLOC=350
			MIN_DIS=100
			MAX_DEP=`echo "$DEP + 25" | bc -l`			
			T1=-1; T2=7.0; TS=0.5; CC=10

	elif (( `echo "$MAG >= 5.50" | bc -l` )) && (( `echo "$MAG < 6.00" | bc -l` )) ; then		
			F1=(0.015 0.015 0.045 0.045)
			F2=(0.020 0.020 0.050 0.050)
			F3=(0.030 0.030 0.060 0.060)
			FM=(0.025 0.025 0.055 0.055)
			n=3
			frac=2
			DISLIM=2
			data_count=24   
			active_smooth="no"     
			LEVEL_RELAMP="2.5" 
			TR_S2_LIM="12" 
			MISFIT_S2="no"
			NE=30000; NES=2000
			SCA_MOM1="1.5e17"
			SCA_MOM2="9.5e17"	
			SCA_STEP="1.0e17"	
			MAX_DIS_FAKE=700
			MAX_DIS=1500
			MAXLOC=450
			MIN_DIS=125			
			MAX_DEP=`echo "$DEP + 30" | bc -l`			
			T1=-2; T2=9.0; TS=1; CC=10

	elif (( `echo "$MAG >= 6.00" | bc -l` )) && (( `echo "$MAG < 6.50" | bc -l` )) ; then				
			F1=(0.005 0.005 0.030 0.030)
			F2=(0.010 0.010 0.040 0.040)
			F3=(0.020 0.020 0.050 0.050)
			FM=(0.010 0.010 0.040 0.040)
			n=3
			frac=2
			DISLIM=2
			data_count=24
			active_smooth="no"   
			LEVEL_RELAMP="3" 
			TR_S2_LIM="10"
			MISFIT_S2="no"
			NE=40000; NES=2500
			SCA_MOM1="8.5e17"
			SCA_MOM2="4.0e19"	
			SCA_STEP="1.0e18"	
			MAX_DIS_FAKE=800				
			MAX_DIS=1500
			MAXLOC=1500
			MIN_DIS=300
			MAX_DEP=`echo "$DEP + 40" | bc -l`
			T1=-2; T2=12.0; TS=1; CC=15

	elif (( `echo "$MAG >= 6.50" | bc -l` )) && (( `echo "$MAG < 7.00" | bc -l` )) ; then				
			F1=(0.005 0.005 0.030 0.030)
			F2=(0.010 0.010 0.040 0.040)
			FM=(0.005 0.005 0.035 0.035)
			n=2
			frac=2
			DISLIM=2
			data_count=24
			active_smooth="no"    
			LEVEL_RELAMP="4"
			TR_S2_LIM="12"
			NE=45000; NES=2500
			SCA_MOM1="8.5e17"
			SCA_MOM2="4.0e19"	
			SCA_STEP="1.0e18"	
			MAX_DIS_FAKE=850				
			MAX_DIS=1500
			MAXLOC=1500
			MIN_DIS=350
			MAX_DEP=`echo "$DEP + 30" | bc -l`
			T1=-2; T2=15.0; TS=1; CC=20		
	
	else
			F1=(0.005 0.005 0.020 0.020)
			FM=(0.005 0.005 0.020 0.020)
			n=1
			frac=2
			DISLIM=2	
			data_count=24
			active_smooth="no"   
			LEVEL_RELAMP="4" 
			TR_S2_LIM="15"
			NE=55000; NES=3000
			SCA_MOM1="2.0e19"
			SCA_MOM2="3.5e20"	
			SCA_STEP="1.0e19"
			MAX_DIS_FAKE=900					
			MAX_DIS=1500
			MAXLOC=900
			MIN_DIS=450
			MAX_DEP=`echo "$DEP + 40" | bc -l`
			T1=-2; T2=20.0; TS=1; CC=20
		
	fi	
	
	(( `echo "$MAX_DEP >= $MAXDP" | bc -l` )) && MAX_DEP="$MAXDP"
	(( `echo "$MAX_DIS >= $MAXDI" | bc -l` )) && MAX_DIS="$MAXDI"
}


KIWI_SETUP ()
{
	if [ $MAX_DIS -le 1000 ]; then
		LEN_PLOT=350; PLOT_ST=70	
	else
		LEN_PLOT=550; PLOT_ST=150	
	fi	
	
	sed -i "/\<GFDB_STEP1\>/c\GFDB_STEP1     $GFDB_DIR" $WORK/$File  2> /dev/null
	sed -i "/\<GFDB_STEP2\>/c\GFDB_STEP2     $GFDB_DIR" $WORK/$File  2> /dev/null
	sed -i "/\<GFDB_STEP3\>/c\GFDB_STEP3     $GFDB_DIR" $WORK/$File  2> /dev/null
	sed -i "/\<NUM_INV_STEPS\>/c\NUM_INV_STEPS    1" $WORK/$File  2> /dev/null
	sed -i "/\<EPIC_DIST_MAX\>/c\EPIC_DIST_MAX     $MAX_DIS"  $WORK/$File  2> /dev/null
	sed -i "/\<EPIC_DIST_MAXLOC\>/c\EPIC_DIST_MAXLOC  $MAXLOC"  $WORK/$File  2> /dev/null
	sed -i "/\<EPIC_DIST_MIN\>/c\EPIC_DIST_MIN     $MIN_DIS"  $WORK/$File  2> /dev/null
	sed -i "/\<WIN_START_A_ST1\>/c\WIN_START_A_ST1     $W_S"  $WORK/$File  2> /dev/null
	sed -i "/\<WIN_TAPER_A_ST1\>/c\WIN_TAPER_A_ST1     $W_T"  $WORK/$File  2> /dev/null
	sed -i "/\<DEPTH_UPPERLIM\>/c\DEPTH_UPPERLIM   $MIN_DEP"  $WORK/$File  2> /dev/null
	sed -i "/\<DEPTH_BOTTOMLIM\>/c\DEPTH_BOTTOMLIM  $MAX_DEP" $WORK/$File  2> /dev/null
	sed -i "/\<SW_FULLMT\>/c\SW_FULLMT       $FULLMT" $WORK/$File  2> /dev/null 
	sed -i "/\<SW_WEIGHT_DIST\>/c\SW_WEIGHT_DIST   $WEIGHT_DIST" $WORK/$File 2> /dev/null 
	sed -i "/\<SCAL_MOM_1\>/c\SCAL_MOM_1      $SCA_MOM1" $WORK/$File  2> /dev/null
	sed -i "/\<SCAL_MOM_2\>/c\SCAL_MOM_2      $SCA_MOM2" $WORK/$File  2> /dev/null
	sed -i "/\<SCAL_MOM_STEP\>/c\SCAL_MOM_STEP   $SCA_STEP" $WORK/$File  2> /dev/null
	sed -i "/\<SW_FILTERNOISY\>/c\SW_FILTERNOISY  $OMIT_NOISY"  $WORK/$File  2> /dev/null 
	sed -i "/\<INV_MODE_STEP1\>/c\INV_MODE_STEP1   $DC_INV_MOD" $WORK/$File  2> /dev/null
	sed -i "/\<BP_F1_STEP1\>/c\BP_F1_STEP1       ${FILTER[0]}"  $WORK/$File  2> /dev/null
	sed -i "/\<BP_F2_STEP1\>/c\BP_F2_STEP1       ${FILTER[1]}"	$WORK/$File  2> /dev/null		
	sed -i "/\<BP_F3_STEP1\>/c\BP_F3_STEP1       ${FILTER[2]}"	$WORK/$File  2> /dev/null		
	sed -i "/\<BP_F4_STEP1\>/c\BP_F4_STEP1       ${FILTER[3]}"	$WORK/$File  2> /dev/null
	sed -i "/\<LEN_PLOT_STEP1\>/c\LEN_PLOT_STEP1   $LEN_PLOT" $WORK/$File  2> /dev/null
	sed -i "/\<TICK_PLOT_STEP1\>/c\TICK_PLOT_STEP1  $PLOT_ST" $WORK/$File  2> /dev/null
	sed -i "/\<INVERSION_DIR\>/c\INVERSION_DIR   $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}" $WORK/$File 2> /dev/null
	sed -i "/\<DATA_DIR\>/c\DATA_DIR    $DATA/$EVENT/DISP" $WORK/$File  2> /dev/null
	sed -i "/\<DATA_FILE\>/c\DATA_FILE        Wave" $WORK/$File  2> /dev/null
	sed -i "/\<LATITUDE_NORTH\>/c\LATITUDE_NORTH   $LAT"  $WORK/$File  2> /dev/null
	sed -i "/\<LONGITUDE_EAST\>/c\LONGITUDE_EAST   $LON"  $WORK/$File  2> /dev/null
	sed -i "/\<YEAR\>/c\YEAR       $Y" $WORK/$File  2> /dev/null
	sed -i "/\<MONTH\>/c\MONTH      $M" $WORK/$File  2> /dev/null
	sed -i "/\<DAY\>/c\DAY        $D" $WORK/$File  2> /dev/null
	sed -i "/\<HOUR\>/c\HOUR       $h" $WORK/$File  2> /dev/null
	sed -i "/\<MIN\>/c\MIN        $m" $WORK/$File  2> /dev/null
	sed -i "/\<SEC\>/c\SEC        $s" $WORK/$File  2> /dev/null
	sed -i "/\<MSEC\>/c\MSEC        $ms" $WORK/$File  2> /dev/null	
	sed -i "/\<DEPTH_1\>/c\DEPTH_1          $DEP" $WORK/$File  2> /dev/null
	sed -i "/\<DEPTH_2\>/c\DEPTH_2          $DEP" $WORK/$File  2> /dev/null	
	sed -i "/\<LEN_PLOT_STEP2\>/c\LEN_PLOT_STEP2    $LEN_PLOT" $WORK/$File  2> /dev/null
	sed -i "/\<TICK_PLOT_STEP2\>/c\TICK_PLOT_STEP2   $PLOT_ST" $WORK/$File  2> /dev/null
	sed -i "/\<CC_SHIFT1\>/c\CC_SHIFT1       -$CC"  $WORK/$File  2> /dev/null
	sed -i "/\<CC_SHIFT2\>/c\CC_SHIFT2        $CC"  $WORK/$File  2> /dev/null
	sed -i "/\<REL_NORTH_1\>/c\REL_NORTH_1     -$NE" $WORK/$File  2> /dev/null
	sed -i "/\<REL_NORTH_2\>/c\REL_NORTH_2      $NE" $WORK/$File  2> /dev/null
	sed -i "/\<REL_EAST_1\>/c\REL_EAST_1      -$NE"  $WORK/$File  2> /dev/null
	sed -i "/\<REL_EAST_2\>/c\REL_EAST_2       $NE"  $WORK/$File  2> /dev/null
	sed -i "/\<REL_NORTH_STEP\>/c\REL_NORTH_STEP   $NES" $WORK/$File  2> /dev/null
	sed -i "/\<REL_EAST_STEP\>/c\REL_EAST_STEP    $NES"	 $WORK/$File  2> /dev/null
	sed -i "/\<REL_TIME_1\>/c\REL_TIME_1       $T1" $WORK/$File  2> /dev/null 		
	sed -i "/\<REL_TIME_2\>/c\REL_TIME_2       $T2" $WORK/$File  2> /dev/null 		
	sed -i "/\<REL_TIME_STEP\>/c\REL_TIME_STEP    $TS"  $WORK/$File  2> /dev/null	
	sed -i "/\<BP_F1_STEP2\>/c\BP_F1_STEP2    ${FILTER[0]}" $WORK/$File  2> /dev/null
	sed -i "/\<BP_F2_STEP2\>/c\BP_F2_STEP2    ${FILTER[1]}"	$WORK/$File  2> /dev/null	
	sed -i "/\<BP_F3_STEP2\>/c\BP_F3_STEP2    ${FILTER[2]}"	$WORK/$File  2> /dev/null	
	sed -i "/\<BP_F4_STEP2\>/c\BP_F4_STEP2    ${FILTER[3]}"	$WORK/$File  2> /dev/null	
	sed -i "/\<WIN_START_A_ST2\>/c\WIN_START_A_ST2  $W_S" $WORK/$File  2> /dev/null
	sed -i "/\<WIN_TAPER_A_ST2\>/c\WIN_TAPER_A_ST2  $W_T" $WORK/$File  2> /dev/null
	sed -i "/\<LEVEL_S2N\>/c\LEVEL_S2N        $LEVEL_S2N" $WORK/$File  2> /dev/null
	sed -i "/\<LEVEL_RELAMP\>/c\LEVEL_RELAMP     $LEVEL_RELAMP" $WORK/$File  2> /dev/null
	sed -i "/\<NOISE_WINDOW\>/c\NOISE_WINDOW     $NOISE_WINDOW" $WORK/$File  2> /dev/null
}


MISFIT ()
{
	cd $BEST_DIR
	[ -d $DATA/$EVENT/HMD ] && rm -f $DATA/$EVENT/HMD/* || mkdir $DATA/$EVENT/HMD 
	[ -d $DATA/$EVENT/NOK ] && rm -f $DATA/$EVENT/NOK/* || mkdir $DATA/$EVENT/NOK 
	
	cat stations.unused | while read line; do
		sta=`echo $line | cut -f 1 -d " "`
		comp=`echo $line | cut -f 2 -d " "`
		case $comp in
			u)
				Comp="Z" ;;
			n)
				Comp="N" ;;
			e)
				Comp="E" ;;
		esac
		
		echo $sta $Comp
		mv $DATA/$EVENT/DISP/*$sta*$Comp $DATA/$EVENT/NOK 
	done	
	
	read -a DISPS <<< `ls dcdseif1-*`
	read -a SYNTS <<< `ls dcsseif1-*`
	
	for ((i=0; i < ${#DISPS[@]}; i++)); do
		DISP=${DISPS[$i]}
		SYNT=${SYNTS[$i]}
		L=`cat $DISP | wc -l`
		
		SUMup=0
		SUMdw=0
		
		for ((j=1; j <= $L; j++)); do
			ampd=`awk -v j=$j 'NR==j {print $2}' $DISP` && ampd=`printf "%.10f\n" $ampd`
			amps=`awk -v j=$j 'NR==j {print $2}' $SYNT` && amps=`printf "%.10f\n" $amps`
			
			up=`echo "($amps - $ampd) * ($amps - $ampd)" | bc -l`
			SUMup=`echo "$SUMup + $up" | bc -l`
			
			dw=`echo "$ampd * $ampd" | bc -l`
			SUMdw=`echo "$SUMdw + $dw" | bc -l`
		done

		misfit=`echo "scale=3; $SUMup / $SUMdw" | bc -l`	
		echo "$DISP $SYNT $misfit"
		
	done > misfit-info.dat
	
		
	for i in `seq 0.3 0.1 3`; do
		awk -v i=$i '$3 <= i {print $0}' misfit-info.dat > best_Misfit.dat
		[ `cat best_Misfit.dat | wc -l` -ge "$TR_S2_LIM" ] && break
	done	
	cp best_Misfit.dat ../
	
	cat misfit-info.dat | while read info; do
		trace=`echo $info | cut -f 1 -d " "`
		[[ `grep -w "$trace" best_Misfit.dat` ]] && continue
		Tr_No=`echo $trace | cut -f 2 -d -`
		Tr_Co=`echo $trace | cut -f 3 -d - | cut -f 1 -d .`
			
		LAT=`awk -v i=$Tr_No 'NR==i {print $1}' stations.table.mec`
		LON=`awk -v i=$Tr_No 'NR==i {print $2}' stations.table.mec`
		STA=`grep -w "$LAT $LON" stations.used | cut -f 2 -d " "`
	
		case $Tr_Co in
			u)
				Comp="Z" ;;
			n)
				Comp="N" ;;
			e)
				Comp="E" ;;
		esac		
		
		mv $DATA/$EVENT/DISP/*$STA*$Comp $DATA/$EVENT/HMD 
	done		
		
	cp misfit-info.dat ../
	cd $WORK	
}


MAP ()
{
	echo -e "Drawing the map. Please wait ...\n"
	cd $BEST_DIR
	if [ -f step2.ptsolution.gmt ]; then 
		Focal_inf="step2.meca.dat"
		EQ_INFO="step2.earthquakeinfo.dat"
	else
		echo "No inversion info file exists." && continue
	fi		
	
	STR=`awk '{print $4}' $Focal_inf`
	DIP=`awk '{print $5}' $Focal_inf`
	RAK=`awk '{print $6}' $Focal_inf`
	
	cat stations.used | while read line; do
		sta=`echo $line | cut -f 2 -d " "`
		sla=`echo $line | cut -f 3 -d " "`
		slo=`echo $line | cut -f 4 -d " "`
		[ `grep -w -c "$sta" stations.unused 2> /dev/null` -eq 3 ] 2> /dev/null && continue
		echo "$sla $slo $sta"
	done > .stations.info
	
	sed -i "/e =/c\e = model.Event(lat=$LAT, lon=$LON)" $PYROCKO/dist_azi_bazi.py 2> /dev/null
	cat .stations.info | while read line; do
		STNM=`echo $line | awk '{print $3}'`
		STLA=`echo $line | awk '{print $1}'`
		STLO=`echo $line | awk '{print $2}'`
		sed -i "/s =/c\s = model.Event(lat=$STLA, lon=$STLO)" $PYROCKO/dist_azi_bazi.py 2> /dev/null
		INFO=`python $PYROCKO/dist_azi_bazi.py`
		DIST=`echo $INFO | awk '{print $1}'`
		AZIM=`echo $INFO | awk '{print substr($2,2,6)}'`
		(( `echo "$AZIM < 0" | bc -l` )) && AZIM=`echo "scale=2; 360 + $AZIM" | bc -l`
		echo "$STNM $DIST $AZIM"
		
	done > .eve_st_azi_dis	

	# Construct a Map
	
	gmt pscoast -Rg -JG"$LON"/"$LAT"/5.7i -Dc -A5000 -K -Bag -Glightbrown -SDarkTurquoise > $RESULTS/SUMMARY/"$EVENT".ps		
	gmt psxy -W0.1,black -R -J -i1,0 ./.stations.info -St0.18i -Gblack -K -O 2> /dev/null >> $RESULTS/SUMMARY/"$EVENT".ps		
	gmt psxy -W0.5,red -R -J -i0,1 -Sa0.2i -Gred -K -O 2> /dev/null <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps		
	$LON $LAT
	EOF
				
	BootsT="bootstrap.dat"
	RN=`grep "REL LAT N" $BootsT | awk '{print $4}'`    # Rel Lat in km
	RN=`echo "scale=2; $RN * 1000" | bc -l`          	# Rel Lat in m
	RE=`grep "REL LON E" $BootsT | awk '{print $4}'`	# Rel Lon in km
	RE=`echo "$RE * 1000" | bc -l`     					# Rel Lon in m
	sed -i "/lat, lon =/c\lat, lon = orthodrome.ne_to_latlon($LAT, $LON, $RN, $RE)" $PYROCKO/carthesian_to_latlon.py 2> /dev/null
	read -a CENTROID <<< `python $PYROCKO/carthesian_to_latlon.py`
	CENT_LAT=`echo ${CENTROID[0]} | awk '{print substr($1,2,7)}'`
	CENT_LON=`echo ${CENTROID[1]} | awk '{print substr($1,1,7)}'`
		
	gmt psxy -W0.5,green -R -J -i0,1 -Sa0.2i -Ggreen -K -O 2> /dev/null <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps		
	$CENT_LON $CENT_LAT
	EOF

	# Legend
	gmt pslegend -R -J -F -DjBR+w2i/1.3i+jBL+l1.2+o3.5i/0i -C0.1i/0.1i -O -K <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps		
	G -0.1i
	H 14 Times-Roman Legend
	G 0.0i
	D 0.2i 1p
	N 1
	G 0.1i
	S 0.1i a 0.16i red 0.25p,red 0.3i  Epicenter Loc
	G 0.1i
	S 0.1i a 0.16i green 0.25p,green 0.3i  Centroid Loc
	G 0.1i	
	S 0.1i t 0.16i black 0.25p 0.3i Station
	G 0.1i
	EOF
	
	NUM_ST=`cat .stations.info | wc -l`
	read -r -a AZI <<< `cat .eve_st_azi_dis | awk '{print $3}' | sort -n`
	
	NUM_ST=${#AZI[@]}
	for ((i=0; i < $((NUM_ST - 1)); i+=1 )); do 
		DIFF[$i]=`echo "scale=2; ${AZI[$i+1]} - ${AZI[$i]}" | bc -l`
	done
	DIFF+=(`echo "scale=2; (360 - ${AZI[((NUM_ST-1))]} + ${AZI[0]})" | bc -l`)
	FIRST_G=`echo ${DIFF[@]} | tr " " "\n" | sort -nr | head -1`	
	
	BootsT="bootstrap.dat"
	sed -i 's/N//' $Focal_inf 
	S1=`grep "3 15 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	D1=`grep "3 14 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	R1=`grep "3 13 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	S2=`grep "5 15 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	D2=`grep "5 14 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	R2=`grep "5 13 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`	
	M0=`grep "3 12 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`		
	Mw=`grep "3 11 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`	
	DP=`grep "3 10 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`		
	MF=`grep "3 8 10 0 0 5" $EQ_INFO  | cut -f 7 -d " "`			
	BP=`grep "3 3 10 0 0 5" $EQ_INFO  | cut -f 7- -d " "`	
	RN=`grep "REL LAT N" $BootsT | awk '{print $4}'`
	RE=`grep "REL LON E" $BootsT | awk '{print $4}'`
	RT=`grep "REL TIME"  $BootsT | awk '{print $3}'`
	(( `echo "$RN < 0" | bc -l` )) && RNM=S && RN=`echo "$RN * -1" | bc -l` || RNM=N
	(( `echo "$RE < 0" | bc -l` )) && REM=W && RE=`echo "$RE * -1" | bc -l` || REM=E
	
		
	gmt pstext -X16.2 -Y6.0 -JX10/7 -R0/14/0/32 -K -O 2> /dev/null <<- END >> $RESULTS/SUMMARY/"$EVENT".ps	
	0 30 13 0 0 5 Epicenter 
	3 30 13 0 0 5 $LAT N $LON E
	0 28 13 0 0 5 Moment Tensor Solutions:
	0 26 13 0 0 5 Strike
	0 24 13 0 0 5 Dip
	0 22 13 0 0 5 Rake
	3 26 13 0 0 5 $S1
	3 24 13 0 0 5 $D1
	3 22 13 0 0 5 $R1	
	5 26 13 0 0 5 $S2
	5 24 13 0 0 5 $D2
	5 22 13 0 0 5 $R2	
	0 20 13 0 0 5 M@-0@-
	3 20 13 0 0 5 $M0
	0 18 13 0 0 5 M@-w@-
	3 18 13 0 0 5 $Mw
	0 16 13 0 0 5 Depth
	3 16 13 0 0 5 $DP
	0 14 13 0 0 5 DC Misfit
	3 14 13 0 0 5 $MF1
	0 12 13 0 0 5 Rel Lon 
	3 12 13 0 0 5 $RE km $REM 
	0 10 13 0 0 5 Rel Lat 
	3 10 13 0 0 5 $RN km $RNM 
	0 08 13 0 0 5 Rel Time
	3 08 13 0 0 5 $RT s			
	0 06 13 0 0 5 MT Misfit
	3 06 13 0 0 5 $MF			
	0 04 13 0 0 5 BP Used
	3 04 13 0 0 5 $BP					
	END

	gmt psmeca $Focal_inf -W1,black -JX3/3 -R-1/1/-1/1 -Sa11,black -Gblack -X5.2 -Y3.7 -K -O 2> /dev/null >> $RESULTS/SUMMARY/"$EVENT".ps		
		
	gmt pstext -W.0.2,black -C0.2c/0.2c -Y5.2 -X-21 -JX8/3 -R-1/8/-1/2 -K -O <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps	
	0 00 11 0 0 5 Gap = $FIRST_G deg
	EOF
	gmt pstext -W.0.2,black -C0.2c/0.2c -Y-0.9 -X0 -JX8/3 -R-1/8/-1/2 -K -O <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps	
	0 00 11 0 0 5 Station.No = $NUM_ST
	EOF
	
	DAte=`date -u +"%Y-%m-%d %H:%M:%S" | cut -f 1 -d " "`
	TIme=`date -u +"%Y-%m-%d %H:%M:%S" | cut -f 2 -d " "`
	D2=`date -d "$DAte $TIme" +%s`
	D1=`date -d "$DATE $TIME" +%s`
	duS=`echo "$D2 - $D1" | bc -l`
	duM=`echo "scale=0; $duS / 60" | bc -l`
	mv $RESULTS/SUMMARY/"$EVENT".ps	$RESULTS/SUMMARY/"$EVENT"-"$duM".ps	
	
	m1=`grep -w "3 8 10 0 0 5" step1.earthquakeinfo.dat | cut -f 7 -d " "`
	m2=`grep -w "3 8 10 0 0 5" step2.earthquakeinfo.dat | cut -f 7 -d " "`
	
	if (( `echo "$m1 <= 0.45" | bc -l` )) && (( `echo "$m2 <= 0.9" | bc -l` )); then
		Q="A"
	elif (( `echo "$m1 <= 0.5" | bc -l` )) && (( `echo "$m2 <= 1.05" | bc -l` )); then
		Q="B"
	elif (( `echo "$m1 <= 0.6" | bc -l` )) && (( `echo "$m2 <= 1.2" | bc -l` )); then
		Q="C"	
	else
		Q="D"
	fi	
	
	if [[ "$Q" < "$MAX_MIS" ]] || [[ "$Q" == "$MAX_MIS" ]]; then
		echo "$LON $LAT ${DP%km*} $S1 $D1 $R1 $Mw $LON $LAT" >> $KIWI/RESULTS/SUMMARY/Map-All/info
		rm ./gmt.history 2> /dev/null
		[ "$SMB_BK" = "True" ] && SMB_BK
		cd $KIWI/RESULTS/SUMMARY/Map-All
		bash ./RUN
	else
		echo "The final quality is $Q, Not reporting!" > ../Report.dat
	fi	
	cd $KIWI
	echo -e "\n"
}	

relative_misfit ()
{
	unset SL
	misfit=`grep -w "3 8 10 0 0 5" step1.earthquakeinfo.dat | cut -f 7 -d " "`
	for item in dip rak str; do
		cat step1."$item"_mis.dat | while read line; do
			a=`echo $line | cut -f 1 -d " "`
			b=`echo $line | cut -f 2 -d " "` && b=`printf "%.6f" $b`
			echo $a $b 
		done > step1."$item"_mis_2.dat
		
		v0=`cat step1."$item"_mis_2.dat | cut -f 1 -d " " | head -1`
		v0M=`cat step1."$item"_mis_2.dat | cut -f 2 -d " " | head -1` && v0M=`printf "%.6f" $v0M`
		unset v1M
		unset v2M
		while read val; do
			vl=`echo $val | cut -f 1 -d " "`
			if (( `echo "$vl >= $v0" | bc -l` )); then
				if [[ -z "$v1M" ]]; then
					v1M=`echo $val | cut -f 2 -d " "` && v1M=`printf "%.6f" $v1M`
				fi
			else		
				if [[ -z "$v2M" ]]; then
					v2M=`echo $val | cut -f 2 -d " "` && v2M=`printf "%.6f" $v2M`
				fi
			fi		
			[[ -n "$v1M" ]] && [[ -n "$v2M" ]] && break
		done < <(cat step1."$item"_mis_2.dat | sort -n -r -k 2)
		SL+=(`echo "0.5 * ($v1M + $v2M)" | bc -l`) 
	done
	S=`echo "0.33 * (${SL[0]} + ${SL[1]} + ${SL[2]})" | bc -l`
	Q=`echo "(1 - $misfit) + $S" | bc -l`
	echo ${EV_RES##*/} $Q >> ../quality.dat
}

MW_EVALUATION () 
{
	STATIONS.DAT
	File=inv_"MW_EVALUATION"
	cp $KIWI/Template $WORK/$File
	cd $WORK
	############ Temp configs
	FREQ=FM[@]
	read -a FILTER <<< ${!FREQ}
	DC_INV_MOD="invert_dmsds"
	############
	KIWI_SETUP
	sed -i "/\<INVERSION_DIR\>/c\INVERSION_DIR   $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}-MW" $File 2> /dev/null
	sed -i "/\<SW_FILTERNOISY\>/c\SW_FILTERNOISY  True"  $File  2> /dev/null
	./rapidinv $File	
	export MAG=`grep "3 11 10 0 0 5" $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}-MW/step1.earthquakeinfo.dat | cut -f 7 -d " "`
	echo $MAG > $RESULTS/$EVENT/MW.dat
	rm -rf $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}-MW
	rm -f $File 
}


STATIONS.DAT ()
{
	rm .marked 2> /dev/null
	i=0
	for data in `ls DISPL*`; do
		ST=`echo $data | cut -f 3 -d .`
		[ `grep $ST .marked 2> /dev/null` ] && continue
		i=$((i+1))
		STLA=`grep -w $ST $DATA/stations.dat | awk '{print $3}'`
		STLO=`grep -w $ST $DATA/stations.dat | awk '{print $4}'`
		echo $ST >> .marked
		[ -n "$STLA" ] && echo "$i $ST $STLA $STLO"
	done > stations.dat
	cd $KIWI
}


EVENT_INFO ()
{
		Y=`echo $EVENT | cut -f 1 -d "-"`
		M=`echo $EVENT | cut -f 2 -d "-"`
		D=`echo $EVENT | cut -f 3 -d "-"`
		DATE="$Y-$M-$D"
		TIME=`echo $EVENT | cut -f 4 -d "-"`
		h=${TIME:0:2}
		m=${TIME:3:2}
		s=${TIME:6:2}
		ms=${TIME:9:1}
		LAT=`echo $EVENT | cut -f 5 -d "-"`
		LON=`echo $EVENT | cut -f 6 -d "-"`
		DEP=`echo $EVENT | cut -f 7 -d "-"`
		MAG=`echo $EVENT | cut -f 8 -d "-"`
}


PROCESS ()
{
	count=`ls $DATA/$EVENT/DISP/DISPL* | wc -l`
	[ "$count" -ge "$data_count" ] && OMIT_NOISY="True" 
		
	for ((i=1; i<="$n"; i++)); do
		FREQ=F$i[@]
		read -a FILTER <<< ${!FREQ}
		File=inv_"$EVENT"
		cp $KIWI/Template $WORK/$File
		KIWI_SETUP
		cd $WORK
		./rapidinv $File
		OutpuT=`grep -w "INVERSION_DIR" $File | awk '{print $2}'`	
		cp $File $OutpuT
	done
	cd ../
	
	
	for EV_RES in `ls -d -1 $RESULTS/$EVENT/0*`; do
		cd $EV_RES
		[[ ! -f step1.earthquakeinfo.dat ]] && continue
		relative_misfit
		cd $KIWI
	done	
	
	BEST_F=`sort -n -r -k 2 $RESULTS/$EVENT/quality.dat | cut -f 1 -d " " | head -1`
	F1=`echo $BEST_F | cut -f 1 -d "-"`
	F2=`echo $BEST_F | cut -f 2 -d "-"`
	read -a FILTER <<< "$F1 $F1 $F2 $F2"
	
	cd $WORK
	
	W_S="0.2"
	W_T="0.1"
	KIWI_SETUP
	sed -i "/INVERSION_DIR/c\INVERSION_DIR   $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}_Check_WS" $File 2> /dev/null
	./rapidinv $File
	cp $File `grep -w "INVERSION_DIR" $File | awk '{print $2}'`	
	
	EV_RES="$RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}_Check_WS"
	cd $EV_RES
	[[ -f step1.earthquakeinfo.dat ]] && relative_misfit 
	cd $KIWI
	
	BEST_DIR="$RESULTS/$EVENT/`sort -n -r -k 2 $RESULTS/$EVENT/quality.dat | cut -f 1 -d " " | head -1`"
	MF1=`grep -w "3 8 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "`
	W_S=`grep -w "WIN_START_A_ST1" $BEST_DIR/$File | awk '{print $2}'`
	W_T=`grep -w "WIN_TAPER_A_ST1" $BEST_DIR/$File | awk '{print $2}'`
	
	echo "$BEST_DIR" > 	$RESULTS/$EVENT/Best.dat
	cp -f $BEST_DIR/$File $WORK
	cd $WORK
	
	[ "$MISFIT_S2" = "yes" ] && MISFIT

	Dep=`grep -w "3 10 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && Dep=${Dep::-2}
	Str=`grep -w "3 15 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && Str=`echo $Str | cut -f 1 -d "."`
	Rak=`grep -w "3 13 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && Rak=`echo $Rak | cut -f 1 -d "."`
	Dip=`grep -w "3 14 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && Dip=`echo $Dip | cut -f 1 -d "."`
	M0=`grep -w "3 12 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "`
	M0=${M0::-2} && M01=`echo $M0 | cut -f 1 -d "E"` && M02=`echo $M0 | cut -f 2 -d "E"` && M0="$M01"e"$M02"
	
	sed -i "/\<DEPTH_1\>/c\DEPTH_1          $Dep" $File  2> /dev/null
	sed -i "/\<DEPTH_2\>/c\DEPTH_2          $Dep" $File  2> /dev/null	
	sed -i "/\<STRIKE_1\>/c\STRIKE_1         $Str" $File  2> /dev/null	
	sed -i "/\<DIP_1\>/c\DIP_1            $Dip" $File  2> /dev/null	
	sed -i "/\<RAKE_1\>/c\RAKE_1           $Rak" $File  2> /dev/null
	sed -i "/\<STRIKE_2\>/c\STRIKE_2         $Str" $File  2> /dev/null	
	sed -i "/\<DIP_2\>/c\DIP_2            $Dip" $File  2> /dev/null	
	sed -i "/\<RAKE_2\>/c\RAKE_2           $Rak" $File  2> /dev/null
	sed -i "/\<SCAL_MOM_1\>/c\SCAL_MOM_1      $M0" $File  2> /dev/null
	sed -i "/\<SCAL_MOM_2\>/c\SCAL_MOM_2      $M0" $File  2> /dev/null
	sed -i "/\<INV_MODE_STEP1\>/c\INV_MODE_STEP1   grid" $File  2> /dev/null	
	sed -i "/\<NUM_INV_STEPS\>/c\NUM_INV_STEPS    2" $File  2> /dev/null
	./rapidinv $File
	mv $WORK/$File $WORK/Processed/
	cd -
}


################################### Script Body

cd $KIWI
while true; do
	cat .ready_data | while read EVENT; do
		[ -d "$RESULTS/$EVENT" ] && rm -rf $RESULTS/$EVENT/* || mkdir "$RESULTS/$EVENT"
		EVENT_INFO
		sed -i "/$EVENT/d" .ready_data	
		CONFIG
		AUTO_SET_KIWI_PARAM
		STATION_SELECTION
		[ "$EVALUATE_MW" = "yes" ] && MW_EVALUATION
		mW=`cat $RESULTS/$EVENT/MW.dat`
		[[ ! -s  $KIWI/.Mth.dat ]] || [[ "$mW" -lt `cat $KIWI/.Mth.dat` ]] && continue
		Mup=`echo "$MAG + 0.35" | bc -l`
		Mdn=`echo "$MAG - 0.35" | bc -l`
		(( `echo "$mW < $Mdn" | bc -l` )) || (( `echo "$mW > $Mup" | bc -l` )) && continue
		[[ `ls $DATA/$EVENT/DISP/DISPL* | wc -l` -gt "$SMOOTH_NUM_LIM" ]] && [[ "$active_smooth" = "yes" ]] && SMOOTH_STATIONS
		STATIONS.DAT
		AUTO_SET_KIWI_PARAM
		PROCESS
		MAP
		echo "Event << $EVENT >> Processed Successfully ..."
	done	
	sleep 60
done	
