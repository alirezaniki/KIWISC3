#!/bin/bash

############### Directories

export SC3_HOME="/home/kiwi/seiscomp3"
export KIWI="$SC3_HOME/KIWISC3"
export DATA="$KIWI/DATA"
export WORK="$KIWI/WORK"
export GFDB="$KIWI/GFDB"
export RESULTS="$KIWI/RESULTS"
export PYROCKO="$KIWI/PYROCKO"

############### KIWI Config
#frac=n          is the fraction of stations to be subject to removal in each iteration ( N = num_st / $frac )
#DISLIM=m        is a clearance distance around removed stations preventing that two close-by stations are
#			     simultaneously removed in a single iteration (DISTANCLIMIT = $MDI * $DISLIM)  



############### Functions

CONFIG ()
{	
export SMOOTH_NUM_LIM=54			   
export DCMISFIT_LIM=0.65
export W_S=0.2; W_T=0.1 
export MIN_DIS=1
export MIN_DEP=1
export OMIT_NOISY="False"
export WEIGHT_DIST="False"
export FULLMT="False"
export DC_INV_MOD="invert_dmsdsok"
}

SMB_BK ()
{
	# Output .ps file name is in YYYYMMDDHHmmss format
	smbclient -U user%payesh //192.168.127.27/public -c "cd /NikSejel/Focal-BK ; put $RESULTS/SUMMARY/$EVENT.ps $Y$M$D$h$m$s.ps"
}

round ()
{
echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*$1)+0.5)/(10^$2)" | bc))
}


SMOOTH_STATIONS ()
{
	cd $DATA/$EVENT/DISP
 
	sed -i "/e =/c\e = model.Event(lat=$LAT, lon=$LON)" $PYROCKO/dist_azi_bazi_2.py 2> /dev/null
	
	num_st=`cat .stations.dat | wc -l`
	mkdir ../extra_data 2> /dev/null
	
	cat .stations.dat | while read STNM; do
		STLA=`grep -w "$STNM" $DATA/stations.dat | awk '{print $3}'`
		STLO=`grep -w "$STNM" $DATA/stations.dat | awk '{print $4}'`
		sed -i "/s =/c\s = model.Event(lat=$STLA, lon=$STLO)" $PYROCKO/dist_azi_bazi_2.py 2> /dev/null
		INFO=`python $PYROCKO/dist_azi_bazi_2.py`
		DIST=`echo $INFO | awk '{print $1}'`
		AZIM=`echo $INFO | awk '{print substr($2,2,6)}'`
		(( `echo "$AZIM < 0" | bc -l` )) && AZIM=`echo "scale=2; 360 + $AZIM" | bc -l`
		echo "$STNM $DIST $AZIM"
		
	done > .eve_st_azi_dis
	
	cat .stations.dat | while read ST1; do
		cat .stations.dat | while read ST2; do
			[ "$ST1" = "$ST2" ] && continue
			st_dis=`grep -w "$ST1 $ST2" $DATA/distance-info.txt`  
			echo $st_dis >> .st_st_dist
		done
	done	

	cat .stations.dat | while read ST1; do
		DI1=`grep -w "$ST1" .eve_st_azi_dis | cut -f 2 -d " "`
		AZ1=`grep -w "$ST1" .eve_st_azi_dis | cut -f 3 -d " "`
			
		read -a STATIONS <<< `grep "^$ST1" .st_st_dist | sort -n -k 3 | head -n 3`	
		ST2=`echo ${STATIONS[@]} | cut -f 2 -d " "`
		ST3=`echo ${STATIONS[@]} | cut -f 5 -d " "`
		ST4=`echo ${STATIONS[@]} | cut -f 8 -d " "`
			
		DI2=`grep -w "$ST2" .eve_st_azi_dis | cut -f 2 -d " "`
		AZ2=`grep -w "$ST2" .eve_st_azi_dis | cut -f 3 -d " "`
			
		DI3=`grep -w "$ST3" .eve_st_azi_dis | cut -f 2 -d " "`
		AZ3=`grep -w "$ST3" .eve_st_azi_dis | cut -f 3 -d " "`				
				
		DI4=`grep -w "$ST4" .eve_st_azi_dis | cut -f 2 -d " "`
		AZ4=`grep -w "$ST4" .eve_st_azi_dis | cut -f 3 -d " "`				
			
		DI12=`echo "scale=1; (($DI1 - $DI2) * ($DI1 - $DI2)) + (($AZ1 - $AZ2) * ($AZ1 - $AZ2))" | bc -l`
		DI12=`bc -l <<< "sqrt($DI12)"`
			
		DI13=`echo "scale=1; (($DI1 - $DI3) * ($DI1 - $DI3)) + (($AZ1 - $AZ3) * ($AZ1 - $AZ3))" | bc -l`
		DI13=`bc -l <<< "sqrt($DI13)"`	
				
		DI14=`echo "scale=1; (($DI1 - $DI4) * ($DI1 - $DI4)) + (($AZ1 - $AZ4) * ($AZ1 - $AZ4))" | bc -l`
		DI14=`bc -l <<< "sqrt($DI14)"`
			
		MDI=`echo "scale=1; ($DI12 + $DI13 + $DI14) / 3" | bc -l`
		echo "$ST1 $MDI"
			
	done >> .MDI
		
	num_st=`cat .stations.dat | wc -l`
	N=`echo "$num_st / $frac" | bc -l` && N=`round $N 0 2> /dev/null` 
		
	cat .MDI | sort -n -k 2 | head -n $N > .rm_select
		
	cat .rm_select | while read line; do
		STNM=`echo $line | cut -f 1 -d " "`		
		MDI=`echo $line | cut -f 2 -d " "`
		DIS_LIM=`echo "$MDI * $DISLIM" | bc -l`
			
		i=0
		for st in `cat .rm_select`; do	
			[ "$st" = "$STNM" ] && continue
			dist=`grep -w "$st $STNM" .st_st_dist | cut -f 3 -d " "`
			dist=`round $dist 0 2> /dev/null`
			if (( `echo "$dist < $DIS_LIM" | bc -l` )) && [ `grep -w "$st" .final_del 2> /dev/null` ]; then
				i=$((i+1))
			fi
		done
		[ "$i" -eq "0" ] && echo "$STNM" >> .final_del	
	done	

		for station in `cat .final_del 2> /dev/null`; do
			mv *$station* ../extra_data 2> /dev/null
		done	
		cd -
}


AUTO_SET_KIWI_PARAM ()
{
	SW1=`echo "$LAT >= 27.6" | bc -l`
	SW2=`echo "$LAT <= 32.0" | bc -l`
	SW3=`echo "$LON >= 47.0" | bc -l`
	SW4=`echo "$LON <= 53.0" | bc -l`
	
	TH1=`echo "$LAT >= 34.5" | bc -l`
	TH2=`echo "$LAT <= 37.0" | bc -l`
	TH3=`echo "$LON >= 49.5" | bc -l`
	TH4=`echo "$LON <= 53.5" | bc -l`
	
	if [ "$SW1" -eq "1" ] && [ "$SW2" -eq "1" ] && [ "$SW3" -eq "1" ] && [ "$SW4" -eq "1" ]; then
		GFDB_DIR="$GFDB/SW"
		MAXDP=60
		MAXDI=1500
	elif [ "$TH1" -eq "1" ] && [ "$TH2" -eq "1" ] && [ "$TH3" -eq "1" ] && [ "$TH4" -eq "1" ]; then
		GFDB_DIR="$GFDB/TEH"
		MAXDP=35	
		MAXDI=500
	else
		GFDB_DIR="$GFDB/IRAN"
		MAXDP=60	
		MAXDI=1500
	fi	


	if (( `echo "$MAG >= 4.20" | bc -l` )) && (( `echo "$MAG < 4.60" | bc -l` )) ; then
			F1=(0.05 0.05 0.08 0.08)
			F2=(0.04 0.04 0.07 0.07)
			F3=(0.06 0.06 0.09 0.09)
			n=3
			data_count=18         # for FILTER_NOISY activation
			frac=3
			DISLIM=4
			S2_NSTA=4			# Minimum number of stations for step2
			S2_USE_P="yes"
			B_LEN=60
			NE=30000; NES=3500
			SCA_MOM1="9.0e14"	
			SCA_MOM2="8.0e15"	
			SCA_STEP="1.0e14"					
			MAX_DIS=450
			MAX_DEP=`echo "$DEP + 40" | bc -l`		
			T=4.0; TS=0.5; CC=10

	elif (( `echo "$MAG >= 4.60" | bc -l` )) && (( `echo "$MAG < 5.00" | bc -l` )) ; then		
			F1=(0.05 0.05 0.08 0.08)
			F2=(0.04 0.04 0.07 0.07)
			F3=(0.03 0.03 0.06 0.06)
			n=3
			data_count=18
			frac=3
			DISLIM=4
			S2_NSTA=4
			S2_USE_P="yes"
			B_LEN=60					
			NE=30000; NES=3500
			SCA_MOM1="7.5e15"
			SCA_MOM2="4.0e16"	
			SCA_STEP="1.0e15"						
			MAX_DIS=500
			MAX_DEP=`echo "$DEP + 40" | bc -l`		
			T=5.0; TS=0.5; CC=10

	elif (( `echo "$MAG >= 5.00" | bc -l` )) && (( `echo "$MAG < 5.60" | bc -l` )) ; then		
			F1=(0.04 0.04 0.07 0.07)
			F2=(0.03 0.03 0.06 0.06)
			F3=(0.02 0.02 0.05 0.05)
			n=3
			frac=3
			DISLIM=4
			S2_NSTA=6
			S2_USE_P="no"	
			data_count=21
			NE=40000; NES=4500
			SCA_MOM1="2.0e16"
			SCA_MOM2="3.5e17"	
			SCA_STEP="1.0e16"						
			MAX_DIS=600
			MAX_DEP=`echo "$DEP + 40" | bc -l`			
			T=6.0; TS=0.5; CC=10

	elif (( `echo "$MAG >= 5.60" | bc -l` )) && (( `echo "$MAG < 6.00" | bc -l` )) ; then		
			F1=(0.04 0.04 0.07 0.07)
			F2=(0.03 0.03 0.06 0.06)
			F3=(0.02 0.02 0.05 0.05)
			n=3
			frac=2
			DISLIM=3
			S2_NSTA=6
			S2_USE_P="no"			
			data_count=21        
			NE=45000; NES=5000
			SCA_MOM1="1.5e17"
			SCA_MOM2="9.5e17"	
			SCA_STEP="1.0e17"						
			MAX_DIS=1000
			MIN_DIS=100			
			MAX_DEP=`echo "$DEP + 40" | bc -l`			
			T=7.0; TS=0.5; CC=10

	elif (( `echo "$MAG >= 6.00" | bc -l` )) && (( `echo "$MAG < 7.00" | bc -l` )) ; then				
			F1=(0.03 0.03 0.06 0.06)
			F2=(0.02 0.02 0.05 0.05)
			F3=(0.01 0.01 0.04 0.04)
			n=3
			frac=2
			DISLIM=2
			S2_NSTA=8
			S2_USE_P="no"			
			data_count=21
			NE=55000; NES=6000
			SCA_MOM1="8.5e17"
			SCA_MOM2="4.0e19"	
			SCA_STEP="1.0e18"			
			MAX_DIS=1300
			MIN_DIS=250
			MAX_DEP=`echo "$DEP + 40" | bc -l`
			T=15.0; TS=0.5; CC=10
	
	else
			F1=(0.01 0.01 0.040 0.040)
			F2=(0.01 0.01 0.035 0.035)
			F3=(0.005 0.005 0.02 0.02)
			n=3
			frac=2
			DISLIM=2	
			S2_NSTA=10
			S2_USE_P="no"		
			data_count=21
			NE=60000; NES=7000
			SCA_MOM1="2.0e19"
			SCA_MOM2="3.5e20"	
			SCA_STEP="1.0e19"			
			MAX_DIS=1300
			MIN_DIS=400
			MAX_DEP=`echo "$DEP + 40" | bc -l`
			T=25.0; TS=0.5; CC=10
		
	fi	
	
	(( `echo "$MAX_DEP >= $MAXDP" | bc -l` )) && MAX_DEP="$MAXDP"
	(( `echo "$MAX_DIS >= $MAXDI" | bc -l` )) && MAX_DIS="$MAXDI"
}


KIWI_SETUP ()
{
	if [ $MAX_DIS -le 1000 ]; then
		LEN_PLOT=350; PLOT_ST=70	
	else
		LEN_PLOT=550; PLOT_ST=150	
	fi	
	
	sed -i "/\<GFDB_STEP1\>/c\GFDB_STEP1     $GFDB_DIR" $WORK/$File  2> /dev/null
	sed -i "/\<GFDB_STEP2\>/c\GFDB_STEP2     $GFDB_DIR" $WORK/$File  2> /dev/null
	sed -i "/\<GFDB_STEP3\>/c\GFDB_STEP3     $GFDB_DIR" $WORK/$File  2> /dev/null
	sed -i "/\<NUM_INV_STEPS\>/c\NUM_INV_STEPS    1" $WORK/$File  2> /dev/null
	sed -i "/\<EPIC_DIST_MAX\>/c\EPIC_DIST_MAX     $MAX_DIS"  $WORK/$File  2> /dev/null
	sed -i "/\<EPIC_DIST_MIN\>/c\EPIC_DIST_MIN     $MIN_DIS"  $WORK/$File  2> /dev/null
	sed -i "/\<WIN_START_A_ST1\>/c\WIN_START_A_ST1     $W_S"  $WORK/$File  2> /dev/null
	sed -i "/\<WIN_TAPER_A_ST1\>/c\WIN_TAPER_A_ST1     $W_T"  $WORK/$File  2> /dev/null
	sed -i "/\<DEPTH_UPPERLIM\>/c\DEPTH_UPPERLIM   $MIN_DEP"  $WORK/$File  2> /dev/null
	sed -i "/\<DEPTH_BOTTOMLIM\>/c\DEPTH_BOTTOMLIM  $MAX_DEP" $WORK/$File  2> /dev/null
	sed -i "/\<SW_FULLMT\>/c\SW_FULLMT       $FULLMT" $WORK/$File  2> /dev/null 
	sed -i "/\<SW_WEIGHT_DIST\>/c\SW_WEIGHT_DIST   $WEIGHT_DIST" $WORK/$File 2> /dev/null 
	sed -i "/\<SCAL_MOM_1\>/c\SCAL_MOM_1      $SCA_MOM1" $WORK/$File  2> /dev/null
	sed -i "/\<SCAL_MOM_2\>/c\SCAL_MOM_2      $SCA_MOM2" $WORK/$File  2> /dev/null
	sed -i "/\<SCAL_MOM_STEP\>/c\SCAL_MOM_STEP   $SCA_STEP" $WORK/$File  2> /dev/null
	sed -i "/\<SW_FILTERNOISY\>/c\SW_FILTERNOISY  $OMIT_NOISY"  $WORK/$File  2> /dev/null 
	sed -i "/\<INV_MODE_STEP1\>/c\INV_MODE_STEP1   $DC_INV_MOD" $WORK/$File  2> /dev/null
	sed -i "/\<BP_F1_STEP1\>/c\BP_F1_STEP1       ${FILTER[0]}"  $WORK/$File  2> /dev/null
	sed -i "/\<BP_F2_STEP1\>/c\BP_F2_STEP1       ${FILTER[1]}"	$WORK/$File  2> /dev/null		
	sed -i "/\<BP_F3_STEP1\>/c\BP_F3_STEP1       ${FILTER[2]}"	$WORK/$File  2> /dev/null		
	sed -i "/\<BP_F4_STEP1\>/c\BP_F4_STEP1       ${FILTER[3]}"	$WORK/$File  2> /dev/null
	sed -i "/\<LEN_PLOT_STEP1\>/c\LEN_PLOT_STEP1   $LEN_PLOT" $WORK/$File  2> /dev/null
	sed -i "/\<TICK_PLOT_STEP1\>/c\TICK_PLOT_STEP1  $PLOT_ST" $WORK/$File  2> /dev/null
	sed -i "/\<INVERSION_DIR\>/c\INVERSION_DIR   $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}" $WORK/$File 2> /dev/null
	sed -i "/\<DATA_DIR\>/c\DATA_DIR    $DATA/$EVENT/DISP" $WORK/$File  2> /dev/null
	sed -i "/\<DATA_FILE\>/c\DATA_FILE        Wave" $WORK/$File  2> /dev/null
	sed -i "/\<LATITUDE_NORTH\>/c\LATITUDE_NORTH   $LAT"  $WORK/$File  2> /dev/null
	sed -i "/\<LONGITUDE_EAST\>/c\LONGITUDE_EAST   $LON"  $WORK/$File  2> /dev/null
	sed -i "/\<YEAR\>/c\YEAR       $Y" $WORK/$File  2> /dev/null
	sed -i "/\<MONTH\>/c\MONTH      $M" $WORK/$File  2> /dev/null
	sed -i "/\<DAY\>/c\DAY        $D" $WORK/$File  2> /dev/null
	sed -i "/\<HOUR\>/c\HOUR       $h" $WORK/$File  2> /dev/null
	sed -i "/\<MIN\>/c\MIN        $m" $WORK/$File  2> /dev/null
	sed -i "/\<SEC\>/c\SEC        $s" $WORK/$File  2> /dev/null
	sed -i "/\<MSEC\>/c\MSEC        $ms" $WORK/$File  2> /dev/null	
	sed -i "/\<DEPTH_1\>/c\DEPTH_1          $DEP" $WORK/$File  2> /dev/null
	sed -i "/\<DEPTH_2\>/c\DEPTH_2          $DEP" $WORK/$File  2> /dev/null	
	sed -i "/\<LEN_PLOT_STEP2\>/c\LEN_PLOT_STEP2    $LEN_PLOT" $WORK/$File  2> /dev/null
	sed -i "/\<TICK_PLOT_STEP2\>/c\TICK_PLOT_STEP2   $PLOT_ST" $WORK/$File  2> /dev/null
	sed -i "/\<CC_SHIFT1\>/c\CC_SHIFT1       -$CC"  $WORK/$File  2> /dev/null
	sed -i "/\<CC_SHIFT2\>/c\CC_SHIFT2        $CC"  $WORK/$File  2> /dev/null
	sed -i "/\<REL_NORTH_1\>/c\REL_NORTH_1     -$NE" $WORK/$File  2> /dev/null
	sed -i "/\<REL_NORTH_2\>/c\REL_NORTH_2      $NE" $WORK/$File  2> /dev/null
	sed -i "/\<REL_EAST_1\>/c\REL_EAST_1      -$NE"  $WORK/$File  2> /dev/null
	sed -i "/\<REL_EAST_2\>/c\REL_EAST_2       $NE"  $WORK/$File  2> /dev/null
	sed -i "/\<REL_NORTH_STEP\>/c\REL_NORTH_STEP   $NES" $WORK/$File  2> /dev/null
	sed -i "/\<REL_EAST_STEP\>/c\REL_EAST_STEP    $NES"	 $WORK/$File  2> /dev/null
	sed -i "/\<REL_TIME_2\>/c\REL_TIME_2       $T" $WORK/$File  2> /dev/null 		
	sed -i "/\<REL_TIME_STEP\>/c\REL_TIME_STEP    $TS"  $WORK/$File  2> /dev/null	
	sed -i "/\<BP_F1_STEP2\>/c\BP_F1_STEP2    ${FILTER[0]}" $WORK/$File  2> /dev/null
	sed -i "/\<BP_F2_STEP2\>/c\BP_F2_STEP2    ${FILTER[1]}"	$WORK/$File  2> /dev/null	
	sed -i "/\<BP_F3_STEP2\>/c\BP_F3_STEP2    ${FILTER[2]}"	$WORK/$File  2> /dev/null	
	sed -i "/\<BP_F4_STEP2\>/c\BP_F4_STEP2    ${FILTER[3]}"	$WORK/$File  2> /dev/null	
	sed -i "/\<WIN_START_A_ST2\>/c\WIN_START_A_ST2  $W_S" $WORK/$File  2> /dev/null
	sed -i "/\<WIN_TAPER_A_ST2\>/c\WIN_TAPER_A_ST2  $W_T" $WORK/$File  2> /dev/null
}


MAP ()
{
	echo -e "Drawing the map. Please wait ...\n"
	cd $BEST_DIR
	if [ -f step2.ptsolution.gmt ]; then 
		Focal_inf="step2.meca.dat"
		EQ_INFO="step2.earthquakeinfo.dat"
	else
		echo "No inversion info file exists." && continue
	fi		
	
	STR=`awk '{print $4}' $Focal_inf`
	DIP=`awk '{print $5}' $Focal_inf`
	RAK=`awk '{print $6}' $Focal_inf`
	
	cat stations.used | while read line; do
		sta=`echo $line | cut -f 2 -d " "`
		sla=`echo $line | cut -f 3 -d " "`
		slo=`echo $line | cut -f 4 -d " "`
		[ `grep -w -c "$sta" stations.unused 2> /dev/null` -eq 3 ] 2> /dev/null && continue
		echo "$sla $slo $sta"
	done > .stations.info
	
	sed -i "/e =/c\e = model.Event(lat=$LAT, lon=$LON)" $PYROCKO/dist_azi_bazi.py 2> /dev/null
	cat .stations.info | while read line; do
		STNM=`echo $line | awk '{print $3}'`
		STLA=`echo $line | awk '{print $1}'`
		STLO=`echo $line | awk '{print $2}'`
		sed -i "/s =/c\s = model.Event(lat=$STLA, lon=$STLO)" $PYROCKO/dist_azi_bazi.py 2> /dev/null
		INFO=`python $PYROCKO/dist_azi_bazi.py`
		DIST=`echo $INFO | awk '{print $1}'`
		AZIM=`echo $INFO | awk '{print substr($2,2,6)}'`
		(( `echo "$AZIM < 0" | bc -l` )) && AZIM=`echo "scale=2; 360 + $AZIM" | bc -l`
		echo "$STNM $DIST $AZIM"
		
	done > .eve_st_azi_dis	

	# Construct a Map
	
	gmt pscoast -Rg -JG"$LON"/"$LAT"/5.7i -Dc -A5000 -K -Bag -Glightbrown -SDarkTurquoise > $RESULTS/SUMMARY/"$EVENT".ps		
	gmt psxy -W0.1,black -R -J -i1,0 ./.stations.info -St0.18i -Gblack -K -O 2> /dev/null >> $RESULTS/SUMMARY/"$EVENT".ps		
	gmt psxy -W0.5,red -R -J -i0,1 -Sa0.2i -Gred -K -O 2> /dev/null <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps		
	$LON $LAT
	EOF
				
	BootsT="bootstrap.dat"
	RN=`grep "REL LAT N" $BootsT | awk '{print $4}'`    # Rel Lat in km
	RN=`echo "scale=2; $RN * 1000" | bc -l`          	# Rel Lat in m
	RE=`grep "REL LON E" $BootsT | awk '{print $4}'`	# Rel Lon in km
	RE=`echo "$RE * 1000" | bc -l`     					# Rel Lon in m
	sed -i "/lat, lon =/c\lat, lon = orthodrome.ne_to_latlon($LAT, $LON, $RN, $RE)" $PYROCKO/carthesian_to_latlon.py 2> /dev/null
	read -a CENTROID <<< `python $PYROCKO/carthesian_to_latlon.py`
	CENT_LAT=`echo ${CENTROID[0]} | awk '{print substr($1,2,7)}'`
	CENT_LON=`echo ${CENTROID[1]} | awk '{print substr($1,1,7)}'`
		
	gmt psxy -W0.5,green -R -J -i0,1 -Sa0.2i -Ggreen -K -O 2> /dev/null <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps		
	$CENT_LON $CENT_LAT
	EOF

	# Legend
	gmt pslegend -R -J -F -DjBR+w2i/1.3i+jBL+l1.2+o3.5i/0i -C0.1i/0.1i -O -K <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps		
	G -0.1i
	H 14 Times-Roman Legend
	G 0.0i
	D 0.2i 1p
	N 1
	G 0.1i
	S 0.1i a 0.16i red 0.25p,red 0.3i  Epicenter Loc
	G 0.1i
	S 0.1i a 0.16i green 0.25p,green 0.3i  Centroid Loc
	G 0.1i	
	S 0.1i t 0.16i black 0.25p 0.3i Station
	G 0.1i
	EOF
	
	NUM_ST=`cat .stations.info | wc -l`
	read -r -a AZI <<< `cat .eve_st_azi_dis | awk '{print $3}' | sort -n`
	
	NUM_ST=${#AZI[@]}
	for ((i=0; i < $((NUM_ST - 1)); i+=1 )); do 
		DIFF[$i]=`echo "scale=2; ${AZI[$i+1]} - ${AZI[$i]}" | bc -l`
	done
	DIFF+=(`echo "scale=2; (360 - ${AZI[((NUM_ST-1))]} + ${AZI[0]})" | bc -l`)
	FIRST_G=`echo ${DIFF[@]} | tr " " "\n" | sort -nr | head -1`	
	
	MF1=`grep "3 8 10 0 0 5" step1.earthquakeinfo.dat | cut -f 7 -d " "`
	BootsT="bootstrap.dat"
	sed -i 's/N//' $Focal_inf 
	S1=`grep "3 15 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	D1=`grep "3 14 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	R1=`grep "3 13 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	S2=`grep "5 15 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	D2=`grep "5 14 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`
	R2=`grep "5 13 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`	
	M0=`grep "3 12 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`		
	Mw=`grep "3 11 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`	
	DP=`grep "3 10 10 0 0 5" $EQ_INFO | cut -f 7 -d " "`		
	MF=`grep "3 8 10 0 0 5" $EQ_INFO  | cut -f 7 -d " "`			
	BP=`grep "3 3 10 0 0 5" $EQ_INFO  | cut -f 7- -d " "`	
	RN=`grep "REL LAT N" $BootsT | awk '{print $4}'`
	RE=`grep "REL LON E" $BootsT | awk '{print $4}'`
	RT=`grep "REL TIME"  $BootsT | awk '{print $3}'`
	(( `echo "$RN < 0" | bc -l` )) && RNM=S && RN=`echo "$RN * -1" | bc -l` || RNM=N
	(( `echo "$RE < 0" | bc -l` )) && REM=W && RE=`echo "$RE * -1" | bc -l` || REM=E
	
	echo "$LAT $LON $S1 $D1 $R1" >> $KIWI/RESULTS/SUMMARY/Map-All/info
		
	gmt pstext -X16.2 -Y6.0 -JX10/7 -R0/14/0/32 -K -O 2> /dev/null <<- END >> $RESULTS/SUMMARY/"$EVENT".ps	
	0 30 13 0 0 5 Epicenter 
	3 30 13 0 0 5 $LAT N $LON E
	0 28 13 0 0 5 Moment Tensor Solutions:
	0 26 13 0 0 5 Strike
	0 24 13 0 0 5 Dip
	0 22 13 0 0 5 Rake
	3 26 13 0 0 5 $S1
	3 24 13 0 0 5 $D1
	3 22 13 0 0 5 $R1	
	5 26 13 0 0 5 $S2
	5 24 13 0 0 5 $D2
	5 22 13 0 0 5 $R2	
	0 20 13 0 0 5 M@-0@-
	3 20 13 0 0 5 $M0
	0 18 13 0 0 5 M@-w@-
	3 18 13 0 0 5 $Mw
	0 16 13 0 0 5 Depth
	3 16 13 0 0 5 $DP
	0 14 13 0 0 5 DC Misfit
	3 14 13 0 0 5 $MF1
	0 12 13 0 0 5 Rel Lon 
	3 12 13 0 0 5 $RE km $REM 
	0 10 13 0 0 5 Rel Lat 
	3 10 13 0 0 5 $RN km $RNM 
	0 08 13 0 0 5 Rel Time
	3 08 13 0 0 5 $RT s			
	0 06 13 0 0 5 MT Misfit
	3 06 13 0 0 5 $MF			
	0 04 13 0 0 5 BP Used
	3 04 13 0 0 5 $BP					
	END

	gmt psmeca $Focal_inf -W1,black -JX3/3 -R-1/1/-1/1 -Sa11,black -Gblack -X5.2 -Y3.7 -K -O 2> /dev/null >> $RESULTS/SUMMARY/"$EVENT".ps		
		
	gmt pstext -W.0.2,black -C0.2c/0.2c -Y5.2 -X-21 -JX8/3 -R-1/8/-1/2 -K -O <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps	
	0 00 11 0 0 5 Gap = $FIRST_G deg
	EOF
	gmt pstext -W.0.2,black -C0.2c/0.2c -Y-0.9 -X0 -JX8/3 -R-1/8/-1/2 -K -O <<- EOF >> $RESULTS/SUMMARY/"$EVENT".ps	
	0 00 11 0 0 5 Station.No = $NUM_ST
	EOF

	rm ./gmt.history 2> /dev/null
	[ "$SMB_BK" = "True" ] && SMB_BK
	cd $KIWI/RESULTS/SUMMARY/Map-All
	bash ./RUN
	cd $KIWI
	echo -e "\n"
}	


STATIONS.DAT ()
{
	cd $DATA/$EVENT/DISP
	rm .marked 2> /dev/null
	i=0
	for data in `ls DISPL*`; do
		ST=`echo $data | cut -f 3 -d .`
		[ `grep $ST .marked 2> /dev/null` ] && continue
		i=$((i+1))
		STLA=`grep -w $ST $DATA/stations.dat | awk '{print $3}'`
		STLO=`grep -w $ST $DATA/stations.dat | awk '{print $4}'`
		echo $ST >> .marked
		[ -n "$STLA" ] && echo "$i $ST $STLA $STLO"
	done > stations.dat
	cd $KIWI
}


EVENT_INFO ()
{
		Y=`echo $EVENT | cut -f 1 -d "-"`
		M=`echo $EVENT | cut -f 2 -d "-"`
		D=`echo $EVENT | cut -f 3 -d "-"`
		TIME=`echo $EVENT | cut -f 4 -d "-"`
		h=${TIME:0:2}
		m=${TIME:3:2}
		s=${TIME:6:2}
		ms=${TIME:9:1}
		LAT=`echo $EVENT | cut -f 5 -d "-"`
		LON=`echo $EVENT | cut -f 6 -d "-"`
		DEP=`echo $EVENT | cut -f 7 -d "-"`
		MAG=`echo $EVENT | cut -f 8 -d "-"`
}


STEP2_ST_COUNT ()
{
	cat $BEST_DIR/stations.used | while read line; do
		st=`echo $line | cut -f 2 -d " "`
		LN=`grep -wn "$st" $BEST_DIR/stations.dat | cut -f 1 -d :`
		DM=`awk "NR==$LN" $BEST_DIR/distazi.dat.tmp | awk '{print $2}'`
		DK=`echo "scale=2; $DM / 1000" | bc -l`
		(( `echo "$DK <= $MAXLOC" | bc -l` )) && echo "$st"
	done > .step2_st
}


PROCESS ()
{
	count=`ls $DATA/$EVENT/DISP/DISPL* | wc -l`
	[ "$count" -ge "$data_count" ] && OMIT_NOISY="True"
		
	for ((i=1; i<="$n"; i++)); do
		FREQ=F$i[@]
		read -a FILTER <<< ${!FREQ}
		File=inv_"$EVENT"
		cp $KIWI/Template $WORK/$File
		KIWI_SETUP
		cd $WORK
		./rapidinv $File	
		cp $File `grep -w "INVERSION_DIR" $File | awk '{print $2}'`
	done
	cd ../
	
	
	for EV_RES in `ls -d -1 $RESULTS/$EVENT/*`; do
		[ ! -f  $EV_RES/step1.earthquakeinfo.dat ] && continue
		MF1=`grep "3 8 10 0 0" $EV_RES/step1.earthquakeinfo.dat 2> /dev/null | cut -f 7 -d " "`
		echo "$EV_RES $MF1" 
	done > .eve_summ       # >> Best BP Filter
	
	
	BEST_F=`cat .eve_summ | sort -n -k 2 | awk '{print $1}' | awk -F "/" '{print $NF}' | head -1`
	F1=`echo $BEST_F | cut -f 1 -d "-"`
	F2=`echo $BEST_F | cut -f 2 -d "-"`
	read -a FILTER <<< "$F1 $F1 $F2 $F2"
	
	cd $WORK
	
	W_S="0.15"
	KIWI_SETUP
	sed -i "/INVERSION_DIR/c\INVERSION_DIR   $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}_Check_WS" $File 2> /dev/null
	./rapidinv $File
	cp $File `grep -w "INVERSION_DIR" $File | awk '{print $2}'`	
	cd -
	
	for EV_RES in `ls -d -1 $RESULTS/$EVENT/*$F1-$F2*`; do
		MF=`grep "3 8 10 0 0" $EV_RES/step1.earthquakeinfo.dat 2> /dev/null | cut -f 7 -d " "`
		echo "$EV_RES $MF" 
	done > .eve_summ    # >> Best W_S for the best BP Filter
	
	BEST_DIR_WS=`cat .eve_summ | sort -n -k 2 | cut -f 1 -d " " | head -1`
	W_S=`grep -w "WIN_START_A_ST1" $BEST_DIR_WS/$File | awk '{print $2}'`
	
	cd $WORK
	WEIGHT_DIST="True"
	KIWI_SETUP
	sed -i "/INVERSION_DIR/c\INVERSION_DIR   $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}_Check_Weight" $File 2> /dev/null
	./rapidinv $File
	cp $File `grep -w "INVERSION_DIR" $File | awk '{print $2}'`	
	cd -
	
	MF_WS1=`grep -w "3 8 10 0 0" $RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}_Check_Weight/step1.earthquakeinfo.dat 2> /dev/null | cut -f 7 -d " "`
	MF_WS2=`grep -w "3 8 10 0 0" $BEST_DIR_WS/step1.earthquakeinfo.dat 2> /dev/null | cut -f 7 -d " "`
	
	if (( `echo "$MF_WS1 <= $MF_WS2" | bc -l` )); then
		BEST_DIR="$RESULTS/$EVENT/${FILTER[1]}-${FILTER[2]}_Check_Weight"
	else
		BEST_DIR="$BEST_DIR_WS"
	fi	
		
	cp $BEST_DIR/$File $WORK
	cd $WORK
	
	DEP_LIM=`echo "$MAX_DEP - 2" | bc -l`
	CDep=`grep -w "3 10 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && CDep=${CDep::-2}
	MISFT=`grep -w "3 8 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "`
	
	C1=`echo "$CDep > $DEP_LIM" | bc -l`
	C2=`echo "$MISFT > $DCMISFIT_LIM" | bc -l`
	
	if [ "$C1" -eq "1" ] || [ "$C2" -eq "1" ]; then
		S2N=0.85
		OMIT_NOISY="True"
		sed -i "/SW_FILTERNOISY/c\SW_FILTERNOISY  $OMIT_NOISY" $File  2> /dev/null 
		sed -i "/LEVEL_S2N/c\LEVEL_S2N        $S2N" $File 2> /dev/null 
		./rapidinv $File
	fi	
	
	Dep=`grep -w "3 10 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && Dep=${Dep::-2}
	Str=`grep -w "3 15 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && Str=`echo $Str | cut -f 1 -d "."`
	Rak=`grep -w "3 13 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && Rak=`echo $Rak | cut -f 1 -d "."`
	Dip=`grep -w "3 14 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "` && Dip=`echo $Dip | cut -f 1 -d "."`
	M0=`grep -w "3 12 10 0 0 5" $BEST_DIR/step1.earthquakeinfo.dat | cut -f 7 -d " "`
	M0=${M0::-2} && M01=`echo $M0 | cut -f 1 -d "E"` && M02=`echo $M0 | cut -f 2 -d "E"` && M0="$M01"e"$M02"
	
	NALL=`cat $BEST_DIR/stations.used | wc -l`
	[ "$S2_NSTA" -gt "$NALL" ] && S2_NSTA="$NALL"
	STEP2_ST_COUNT
	if [ `cat .step2_st | wc -l` -lt "$S2_NSTA" ]; then
		while [ `cat .step2_st | wc -l` -le "$S2_NSTA" ]; do
			MAXLOC=`echo "$MAXLOC + 25" | bc -l`
			STEP2_ST_COUNT
		done
	fi	
	
	(( `echo "$MAXLOC > $MAX_DIS" | bc -l` )) && MAXLOC="$MAX_DIS"	

	sed -i "/\<DEPTH_1\>/c\DEPTH_1          $Dep" $File  2> /dev/null
	sed -i "/\<DEPTH_2\>/c\DEPTH_2          $Dep" $File  2> /dev/null	
	sed -i "/\<STRIKE_1\>/c\STRIKE_1         $Str" $File  2> /dev/null	
	sed -i "/\<DIP_1\>/c\DIP_1            $Dip" $File  2> /dev/null	
	sed -i "/\<RAKE_1\>/c\RAKE_1           $Rak" $File  2> /dev/null
	sed -i "/\<STRIKE_2\>/c\STRIKE_2         $Str" $File  2> /dev/null	
	sed -i "/\<DIP_2\>/c\DIP_2            $Dip" $File  2> /dev/null	
	sed -i "/\<RAKE_2\>/c\RAKE_2           $Rak" $File  2> /dev/null
	sed -i "/\<SCAL_MOM_1\>/c\SCAL_MOM_1      $M0" $File  2> /dev/null
	sed -i "/\<SCAL_MOM_2\>/c\SCAL_MOM_2      $M0" $File  2> /dev/null
	sed -i "/\<INV_MODE_STEP1\>/c\INV_MODE_STEP1   grid" $File  2> /dev/null	
	sed -i "/\<NUM_INV_STEPS\>/c\NUM_INV_STEPS    2" $File  2> /dev/null
	
	if [ "$S2_USE_P" = "yes" ]; then
		sed -i "/\<PHASES_2_USE_ST2\>/c\PHASES_2_USE_ST2  b"	$File  2> /dev/null		
		sed -i "/\<WIN_LENGTH_P_ST2\>/c\WIN_LENGTH_P_ST2  $B_LEN"	$File  2> /dev/null	
		sed -i "/\<WIN_LENGTH_S_ST2\>/c\WIN_LENGTH_S_ST2  $B_LEN"	$File  2> /dev/null	
		sed -i "/\<WIN_START_P_ST2\>/c\WIN_START_P_ST2  $W_S"	$File  2> /dev/null	
		sed -i "/\<WIN_TAPER_P_ST2\>/c\WIN_TAPER_P_ST2  $W_T"	$File  2> /dev/null		
		sed -i "/\<WIN_START_S_ST2\>/c\WIN_START_S_ST2  $W_S"	$File  2> /dev/null	
		sed -i "/\<WIN_TAPER_S_ST2\>/c\WIN_TAPER_S_ST2  $W_T"	$File  2> /dev/null			
		sed -i "/\<BP_F3_STEP2\>/c\BP_F3_STEP2       0.1"	$File  2> /dev/null		
		sed -i "/\<BP_F4_STEP2\>/c\BP_F4_STEP2       0.1"	$File  2> /dev/null	
	fi
	./rapidinv $File
	mv $WORK/$File $WORK/Processed/
	cd -
}


################################## Script Body

cd $KIWI
while true; do
	cat .ready_data | while read EVENT; do
		[ -d "$RESULTS/$EVENT" ] && rm -rf $RESULTS/$EVENT/* || mkdir "$RESULTS/$EVENT"
		EVENT_INFO
		sed -i "/$EVENT/d" .ready_data	
		CONFIG
		AUTO_SET_KIWI_PARAM
		[ `ls $DATA/$EVENT/DISP/DISPL* | wc -l` -gt "$SMOOTH_NUM_LIM" ] && SMOOTH_STATIONS
		STATIONS.DAT
		PROCESS
		MAP
		echo "Event << $EVENT >> Processed Successfully ..."
	done	
	sleep 60
done	
